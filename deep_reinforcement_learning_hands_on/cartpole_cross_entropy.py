# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_cartpole_cross_entropy.ipynb.

# %% auto 0
__all__ = ['HIDDEN_SIZE', 'BATCH_SIZE', 'PERCENTILE', 'Episode', 'EpisodeStep', 'Net', 'filter_batch', 'main']

# %% ../nbs/01_cartpole_cross_entropy.ipynb 1
import gym
import numpy as np
import torch
import torch.nn as nn
import pytorch_lightning as pl
from collections import namedtuple

# %% ../nbs/01_cartpole_cross_entropy.ipynb 3
HIDDEN_SIZE = 128
BATCH_SIZE = 16
PERCENTILE = 70

# %% ../nbs/01_cartpole_cross_entropy.ipynb 5
Episode = namedtuple("Episode", field_names=["reward", "steps"])
EpisodeStep = namedtuple("EpisodeStep", field_names=["observation", "action"])

# %% ../nbs/01_cartpole_cross_entropy.ipynb 7
class Net(pl.LightningModule):
    def __init__(self, obs_size, hidden_size, n_actions):
        super(Net, self).__init__()
        self.net = nn.Sequential(
            nn.Linear(obs_size, hidden_size),
            nn.ReLU(),
            nn.Linear(hidden_size, n_actions),
        )

    def forward(self, x):
        return self.net(x)

    def training_step(self, batch, batch_idx):
        obs_v, acts_v, _, _ = batch
        action_scores_v = self.forward(obs_v)
        loss_v = nn.CrossEntropyLoss()(action_scores_v, acts_v)
        return {"loss": loss_v}

    def configure_optimizers(self):
        return torch.optim.Adam(params=self.parameters(), lr=0.01)
    
    def train_dataloader(self):
        # create the environment
        env = gym.make("CartPole-v0")
        # generate a batch of episodes by interacting with the environment
        batch = []
        for _ in range(BATCH_SIZE):
            obs = env.reset()
            episode_reward = 0.0
            episode_steps = []
            while True:
                obs_v = torch.FloatTensor([obs])
                act_probs_v = nn.Softmax(dim=1)(self.forward(obs_v))
                act_probs = act_probs_v.data.numpy()[0]
                action = np.random.choice(len(act_probs), p=act_probs)
                next_obs, reward, is_done, _ = env.step(action)
                episode_reward += reward
                step = EpisodeStep(observation=obs, action=action)
                episode_steps.append(step)
                if is_done:
                    batch.append(Episode(reward=episode_reward, steps=episode_steps))
                    break
                obs = next_obs

        # filter the episodes and yield the elite ones as a data iterator
        while True:
            # filter the episodes to get the elite ones
            obs_v, acts_v, reward_b, reward_m = filter_batch(batch, PERCENTILE)
            yield (obs_v, acts_v, reward_b, reward_m)

# %% ../nbs/01_cartpole_cross_entropy.ipynb 9
def filter_batch(batch, percentile):
    rewards = list(map(lambda s: s.reward, batch))
    reward_bound = np.percentile(rewards, percentile)
    reward_mean = float(np.mean(rewards))

    train_obs = []
    train_act = []
    for reward, steps in batch:
        if reward < reward_bound:
            continue
        train_obs.extend(map(lambda step: step.observation, steps))
        train_act.extend(map(lambda step: step.action, steps))

    train_obs_v = torch.FloatTensor(train_obs)
    train_act_v = torch.LongTensor(train_act)
    return train_obs_v, train_act_v, reward_bound, reward_mean

# %% ../nbs/01_cartpole_cross_entropy.ipynb 11
def main():
    obs_size = gym.make("CartPole-v0").observation_space.shape[0]
    n_actions = gym.make("CartPole-v0").action_space.n
    model = Net(obs_size, HIDDEN_SIZE, n_actions)
    trainer = pl.Trainer(max_epochs=100)
    trainer.fit(model)

if __name__ == "__main__":
    main()

